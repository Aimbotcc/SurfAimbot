local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Variables
local silentAimActive = true
local isLeftMouseDown = false
local isRightMouseDown = false
local autoClickConnection = nil
local tracersEnabled = true
local framesEnabled = true
local tracers = {}

-- Function to check if the lobby is visible
local function isLobbyVisible()
    return LocalPlayer.PlayerGui:FindFirstChild("MainGui") and LocalPlayer.PlayerGui.MainGui:FindFirstChild("MainFrame") and LocalPlayer.PlayerGui.MainGui.MainFrame:FindFirstChild("Lobby") and LocalPlayer.PlayerGui.MainGui.MainFrame.Lobby.Currency.Visible
end

-- Function to lock camera to the target player's head
local function lockCameraToHead()
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local head = targetPlayer.Character.Head
        local headPosition = Camera:WorldToViewportPoint(head.Position)
        if headPosition.Z > 0 then
            local cameraPosition = Camera.CFrame.Position
            Camera.CFrame = CFrame.new(cameraPosition, head.Position)
        end
    end
end

local function createFrameAndTracerForCharacter(character, localCharacter)
    local head = character:WaitForChild("Head")

    -- Create and add the dark green frame
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "GreenFrameGUI"
    billboardGui.Adornee = head
    billboardGui.Size = UDim2.new(4, 0, 6, 0) -- Adjust the size to fit better
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = character

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0.9, 0, 1.2, 0) -- Adjust size
    frame.Position = UDim2.new(0, 0, 0.05, 0) -- Adjust position
    frame.BackgroundColor3 = Color3.fromRGB(0, 100, 0) -- Dark green
    frame.BackgroundTransparency = 0.7 -- Set transparency to 0.8
    frame.BorderSizePixel = 0
    frame.Parent = billboardGui

    -- Create a line using the Drawing API
    local line = Drawing.new("Line")
    line.Thickness = 3
    line.Color = Color3.fromRGB(0, 100, 0) -- Dark green
    line.Transparency = 0.5

    -- Store the line in the tracers table
    tracers[character] = {line = line, frame = frame}

    -- Update the line position every frame
    RunService.RenderStepped:Connect(function()
        if tracersEnabled and character.Parent and localCharacter and localCharacter:FindFirstChild("HumanoidRootPart") then
            local headPosition = Camera:WorldToViewportPoint(character.Head.Position)
            local rootPosition = Camera:WorldToViewportPoint(localCharacter.HumanoidRootPart.Position)
            line.From = Vector2.new(rootPosition.X, rootPosition.Y)
            line.To = Vector2.new(headPosition.X, headPosition.Y)
            line.Visible = true
        else
            line.Visible = false
        end
        frame.Visible = framesEnabled
    end)
end

local function onCharacterAdded(player)
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            createFrameAndTracerForCharacter(character, LocalPlayer.Character)
        end)
        if player.Character then
            createFrameAndTracerForCharacter(player.Character, LocalPlayer.Character)
        end
    end
end

-- Apply tracers to the local player's character
local function onLocalCharacterAdded(character)
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character then
            createFrameAndTracerForCharacter(player.Character, character)
        end
    end
end

-- Connect to local player's character spawning
LocalPlayer.CharacterAdded:Connect(onLocalCharacterAdded)
if LocalPlayer.Character then
    onLocalCharacterAdded(LocalPlayer.Character)
end

-- Connect to other players' characters spawning
Players.PlayerAdded:Connect(onCharacterAdded)
for _, player in pairs(Players:GetPlayers()) do
    onCharacterAdded(player)
end

-- Clean up lines when characters are removed
Players.PlayerRemoving:Connect(function(player)
    if tracers[player.Character] then
        tracers[player.Character].line:Remove()
        tracers[player.Character].frame:Destroy()
        tracers[player.Character] = nil
    end
end)

-- Create UI for toggling tracers and frames
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = LocalPlayer.PlayerGui

local function createStyledButton(text, position)
    local button = Instance.new("TextButton")
    button.Text = text
    button.Size = UDim2.new(0, 200, 0, 50)
    button.Position = position
    button.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark grey
    button.BackgroundTransparency = 0.5
    button.BorderColor3 = Color3.fromRGB(255, 255, 255) -- White outline
    button.BorderSizePixel = 1
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.SourceSans
    button.TextSize = 24
    button.AutoButtonColor = false

    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0, 12)
    uiCorner.Parent = button

    button.Parent = ScreenGui
    return button
end

local tracersButton = createStyledButton("Toggle Tracers", UDim2.new(1, -220, 0, 10))
tracersButton.MouseButton1Click:Connect(function()
    tracersEnabled = not tracersEnabled
    tracersButton.BackgroundColor3 = tracersEnabled and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(255, 100, 100)
end)

local framesButton = createStyledButton("Toggle Boxes", UDim2.new(1, -220, 0, 70))
framesButton.MouseButton1Click:Connect(function()
    framesEnabled = not framesEnabled
    framesButton.BackgroundColor3 = framesEnabled and Color3.fromRGB(50, 50, 50) or Color3.fromRGB(255, 100, 100)
end)





-- Services
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Camera = Workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

-- Variables
local silentAimActive = true
local isLeftMouseDown = false
local isRightMouseDown = false
local autoClickConnection = nil
local targetPlayer = nil

-- Function to check if the lobby is visible
local function isLobbyVisible()
    return LocalPlayer.PlayerGui:FindFirstChild("MainGui") and LocalPlayer.PlayerGui.MainGui:FindFirstChild("MainFrame") and LocalPlayer.PlayerGui.MainGui.MainFrame:FindFirstChild("Lobby") and LocalPlayer.PlayerGui.MainGui.MainFrame.Lobby.Currency.Visible
end

-- Function to lock camera to the target player's head
local function lockCameraToHead()
    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local head = targetPlayer.Character.Head
        local headPosition = Camera:WorldToViewportPoint(head.Position)
        if headPosition.Z > 0 then
            local cameraPosition = Camera.CFrame.Position
            local direction = (head.Position - cameraPosition).Unit
            Camera.CFrame = CFrame.new(cameraPosition, head.Position)
        end
    end
end


-- Function to get the nearest target's head
local function getNearestHead()
    local closestPlayer = nil
    local shortestDistance = math.huge

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestPlayer = player
            end
        end
    end

    if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("Head") then
        return closestPlayer.Character.Head
    end

    return nil
end

-- Silent aim functionality with headshots
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 and silentAimActive then
        local targetHead = getNearestHead()
        if targetHead then
            local aimPosition = targetHead.Position
            Camera.CFrame = CFrame.new(Camera.CFrame.Position, aimPosition)
            ReplicatedStorage.Remotes.Attack:FireServer(targetHead)
        end
    end
end)

-- Detect when mouse buttons are pressed
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isLeftMouseDown = true
        autoClick()
    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
        isRightMouseDown = true
        autoClick()
    end
end)

-- Detect when mouse buttons are released
UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        isLeftMouseDown = false
    elseif input.UserInputType == Enum.UserInputType.MouseButton2 then
        isRightMouseDown = false
    end
end)

-- Run the lock camera to head function periodically
RunService.RenderStepped:Connect(function()
    lockCameraToHead()
end)
